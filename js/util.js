(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var e = function () {
  function r(e, r, n) {
    return r || n ? String.fromCharCode(r || n) : u[e] || e;
  }

  function n(e) {
    return p[e];
  }

  var t = /&quot;|&lt;|&gt;|&amp;|&nbsp;|&apos;|&#(\d+);|&#(\d+)/g,
      o = /['<> "&]/g,
      u = {
    "&quot;": '"',
    "&lt;": "<",
    "&gt;": ">",
    "&amp;": "&",
    "&nbsp;": " "
  },
      c = /\u00a0/g,
      a = /<br\s*\/?>/gi,
      i = /\r?\n/g,
      f = /\s/g,
      p = {};

  for (var s in u) {
    p[u[s]] = s;
  }

  return u["&apos;"] = "'", p["'"] = "&#39;", {
    encode: function encode(e) {
      return e ? ("" + e).replace(o, n).replace(i, "<br/>").replace(f, "&nbsp;") : "";
    },
    decode: function decode(e) {
      return e ? ("" + e).replace(a, "\n").replace(t, r).replace(c, " ") : "";
    },
    encodeBase16: function encodeBase16(e) {
      if (!e) return e;
      e += "";

      for (var r = [], n = 0, t = e.length; t > n; n++) {
        r.push(e.charCodeAt(n).toString(16).toUpperCase());
      }

      return r.join("");
    },
    encodeBase16forJSON: function encodeBase16forJSON(e) {
      if (!e) return e;
      e = e.replace(/[\u4E00-\u9FBF]/gi, function (e) {
        return escape(e).replace("%u", "\\u");
      });

      for (var r = [], n = 0, t = e.length; t > n; n++) {
        r.push(e.charCodeAt(n).toString(16).toUpperCase());
      }

      return r.join("");
    },
    decodeBase16: function decodeBase16(e) {
      if (!e) return e;
      e += "";

      for (var r = [], n = 0, t = e.length; t > n; n += 2) {
        r.push(String.fromCharCode("0x" + e.slice(n, n + 2)));
      }

      return r.join("");
    },
    encodeObject: function encodeObject(r) {
      if (r instanceof Array) for (var n = 0, t = r.length; t > n; n++) {
        r[n] = e.encodeObject(r[n]);
      } else if ("object" == _typeof(r)) for (var o in r) {
        r[o] = e.encodeObject(r[o]);
      } else if ("string" == typeof r) return e.encode(r);
      return r;
    },
    loadScript: function loadScript(path) {
      var $script = document.createElement('script');
      document.getElementsByTagName('body')[0].appendChild($script);
      $script.setAttribute('src', path);
    },
    addLoadEvent: function addLoadEvent(func) {
      var oldonload = window.onload;

      if (typeof window.onload != "function") {
        window.onload = func;
      } else {
        window.onload = function () {
          oldonload();
          func();
        };
      }
    }
  };
}();

module.exports = e;

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJ0aGVtZXMveWlsaWEvc291cmNlL2pzL3V0aWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0FDQUEsSUFBSSxDQUFDLEdBQUcsWUFBVztBQUNmLFdBQVMsQ0FBVCxDQUFXLENBQVgsRUFBYyxDQUFkLEVBQWlCLENBQWpCLEVBQW9CO0FBQ2hCLFdBQU8sQ0FBQyxJQUFJLENBQUwsR0FBUyxNQUFNLENBQUMsWUFBUCxDQUFvQixDQUFDLElBQUksQ0FBekIsQ0FBVCxHQUF1QyxDQUFDLENBQUMsQ0FBRCxDQUFELElBQVEsQ0FBdEQ7QUFDSDs7QUFDRCxXQUFTLENBQVQsQ0FBVyxDQUFYLEVBQWM7QUFDVixXQUFPLENBQUMsQ0FBQyxDQUFELENBQVI7QUFDSDs7QUFDRCxNQUFJLENBQUMsR0FBRyx3REFBUjtBQUFBLE1BQ0ksQ0FBQyxHQUFHLFdBRFI7QUFBQSxNQUVJLENBQUMsR0FBRztBQUNKLGNBQVUsR0FETjtBQUVKLFlBQVEsR0FGSjtBQUdKLFlBQVEsR0FISjtBQUlKLGFBQVMsR0FKTDtBQUtKLGNBQVU7QUFMTixHQUZSO0FBQUEsTUFTSSxDQUFDLEdBQUcsU0FUUjtBQUFBLE1BVUksQ0FBQyxHQUFHLGNBVlI7QUFBQSxNQVdJLENBQUMsR0FBRyxRQVhSO0FBQUEsTUFZSSxDQUFDLEdBQUcsS0FaUjtBQUFBLE1BYUksQ0FBQyxHQUFHLEVBYlI7O0FBY0EsT0FBSyxJQUFJLENBQVQsSUFBYyxDQUFkO0FBQ0ksSUFBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUQsQ0FBRixDQUFELEdBQVUsQ0FBVjtBQURKOztBQUVBLFNBQU8sQ0FBQyxDQUFDLFFBQUQsQ0FBRCxHQUFjLEdBQWQsRUFDUCxDQUFDLENBQUMsR0FBRCxDQUFELEdBQVMsT0FERixFQUVQO0FBQ0ksSUFBQSxNQUFNLEVBQUUsZ0JBQVMsQ0FBVCxFQUFZO0FBQ2hCLGFBQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFOLEVBQVMsT0FBVCxDQUFpQixDQUFqQixFQUFvQixDQUFwQixFQUF1QixPQUF2QixDQUErQixDQUEvQixFQUFrQyxPQUFsQyxFQUEyQyxPQUEzQyxDQUFtRCxDQUFuRCxFQUFzRCxRQUF0RCxDQUFILEdBQXFFLEVBQTdFO0FBQ0gsS0FITDtBQUlJLElBQUEsTUFBTSxFQUFFLGdCQUFTLENBQVQsRUFBWTtBQUNoQixhQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBTixFQUFTLE9BQVQsQ0FBaUIsQ0FBakIsRUFBb0IsSUFBcEIsRUFBMEIsT0FBMUIsQ0FBa0MsQ0FBbEMsRUFBcUMsQ0FBckMsRUFBd0MsT0FBeEMsQ0FBZ0QsQ0FBaEQsRUFBbUQsR0FBbkQsQ0FBSCxHQUE2RCxFQUFyRTtBQUNILEtBTkw7QUFPSSxJQUFBLFlBQVksRUFBRSxzQkFBUyxDQUFULEVBQVk7QUFDdEIsVUFBSSxDQUFDLENBQUwsRUFDSSxPQUFPLENBQVA7QUFDSixNQUFBLENBQUMsSUFBSSxFQUFMOztBQUNBLFdBQUssSUFBSSxDQUFDLEdBQUcsRUFBUixFQUFZLENBQUMsR0FBRyxDQUFoQixFQUFtQixDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQTlCLEVBQXNDLENBQUMsR0FBRyxDQUExQyxFQUE2QyxDQUFDLEVBQTlDO0FBQ0ksUUFBQSxDQUFDLENBQUMsSUFBRixDQUFPLENBQUMsQ0FBQyxVQUFGLENBQWEsQ0FBYixFQUFnQixRQUFoQixDQUF5QixFQUF6QixFQUE2QixXQUE3QixFQUFQO0FBREo7O0FBRUEsYUFBTyxDQUFDLENBQUMsSUFBRixDQUFPLEVBQVAsQ0FBUDtBQUNILEtBZEw7QUFlSSxJQUFBLG1CQUFtQixFQUFFLDZCQUFTLENBQVQsRUFBWTtBQUM3QixVQUFJLENBQUMsQ0FBTCxFQUNJLE9BQU8sQ0FBUDtBQUNKLE1BQUEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFGLENBQVUsbUJBQVYsRUFBK0IsVUFBUyxDQUFULEVBQVk7QUFDM0MsZUFBTyxNQUFNLENBQUMsQ0FBRCxDQUFOLENBQVUsT0FBVixDQUFrQixJQUFsQixFQUF3QixLQUF4QixDQUFQO0FBQ0gsT0FGRyxDQUFKOztBQUdBLFdBQUssSUFBSSxDQUFDLEdBQUcsRUFBUixFQUFZLENBQUMsR0FBRyxDQUFoQixFQUFtQixDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQTlCLEVBQXNDLENBQUMsR0FBRyxDQUExQyxFQUE2QyxDQUFDLEVBQTlDO0FBQ0ksUUFBQSxDQUFDLENBQUMsSUFBRixDQUFPLENBQUMsQ0FBQyxVQUFGLENBQWEsQ0FBYixFQUFnQixRQUFoQixDQUF5QixFQUF6QixFQUE2QixXQUE3QixFQUFQO0FBREo7O0FBRUEsYUFBTyxDQUFDLENBQUMsSUFBRixDQUFPLEVBQVAsQ0FBUDtBQUNILEtBeEJMO0FBeUJJLElBQUEsWUFBWSxFQUFFLHNCQUFTLENBQVQsRUFBWTtBQUN0QixVQUFJLENBQUMsQ0FBTCxFQUNJLE9BQU8sQ0FBUDtBQUNKLE1BQUEsQ0FBQyxJQUFJLEVBQUw7O0FBQ0EsV0FBSyxJQUFJLENBQUMsR0FBRyxFQUFSLEVBQVksQ0FBQyxHQUFHLENBQWhCLEVBQW1CLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBOUIsRUFBc0MsQ0FBQyxHQUFHLENBQTFDLEVBQTZDLENBQUMsSUFBSSxDQUFsRDtBQUNJLFFBQUEsQ0FBQyxDQUFDLElBQUYsQ0FBTyxNQUFNLENBQUMsWUFBUCxDQUFvQixPQUFPLENBQUMsQ0FBQyxLQUFGLENBQVEsQ0FBUixFQUFXLENBQUMsR0FBRyxDQUFmLENBQTNCLENBQVA7QUFESjs7QUFFQSxhQUFPLENBQUMsQ0FBQyxJQUFGLENBQU8sRUFBUCxDQUFQO0FBQ0gsS0FoQ0w7QUFpQ0ksSUFBQSxZQUFZLEVBQUUsc0JBQVMsQ0FBVCxFQUFZO0FBQ3RCLFVBQUksQ0FBQyxZQUFZLEtBQWpCLEVBQ0ksS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFSLEVBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUF0QixFQUE4QixDQUFDLEdBQUcsQ0FBbEMsRUFBcUMsQ0FBQyxFQUF0QztBQUNJLFFBQUEsQ0FBQyxDQUFDLENBQUQsQ0FBRCxHQUFPLENBQUMsQ0FBQyxZQUFGLENBQWUsQ0FBQyxDQUFDLENBQUQsQ0FBaEIsQ0FBUDtBQURKLE9BREosTUFHSyxJQUFJLG9CQUFtQixDQUFuQixDQUFKLEVBQ0QsS0FBSyxJQUFJLENBQVQsSUFBYyxDQUFkO0FBQ0ksUUFBQSxDQUFDLENBQUMsQ0FBRCxDQUFELEdBQU8sQ0FBQyxDQUFDLFlBQUYsQ0FBZSxDQUFDLENBQUMsQ0FBRCxDQUFoQixDQUFQO0FBREosT0FEQyxNQUdBLElBQUksWUFBWSxPQUFPLENBQXZCLEVBQ0QsT0FBTyxDQUFDLENBQUMsTUFBRixDQUFTLENBQVQsQ0FBUDtBQUNKLGFBQU8sQ0FBUDtBQUNILEtBM0NMO0FBNENJLElBQUEsVUFBVSxFQUFFLG9CQUFTLElBQVQsRUFBZTtBQUN2QixVQUFJLE9BQU8sR0FBRyxRQUFRLENBQUMsYUFBVCxDQUF1QixRQUF2QixDQUFkO0FBQ0EsTUFBQSxRQUFRLENBQUMsb0JBQVQsQ0FBOEIsTUFBOUIsRUFBc0MsQ0FBdEMsRUFBeUMsV0FBekMsQ0FBcUQsT0FBckQ7QUFDQSxNQUFBLE9BQU8sQ0FBQyxZQUFSLENBQXFCLEtBQXJCLEVBQTRCLElBQTVCO0FBQ0gsS0FoREw7QUFpREksSUFBQSxZQUFZLEVBQUUsc0JBQVMsSUFBVCxFQUFjO0FBQ3hCLFVBQUksU0FBUyxHQUFHLE1BQU0sQ0FBQyxNQUF2Qjs7QUFDQSxVQUFJLE9BQU8sTUFBTSxDQUFDLE1BQWQsSUFBc0IsVUFBMUIsRUFBc0M7QUFDbEMsUUFBQSxNQUFNLENBQUMsTUFBUCxHQUFnQixJQUFoQjtBQUNILE9BRkQsTUFFTztBQUNILFFBQUEsTUFBTSxDQUFDLE1BQVAsR0FBZ0IsWUFBVztBQUN2QixVQUFBLFNBQVM7QUFDVCxVQUFBLElBQUk7QUFDUCxTQUhEO0FBSUg7QUFDSjtBQTNETCxHQUZBO0FBK0RILENBdEZPLEVBQVI7O0FBd0ZBLE1BQU0sQ0FBQyxPQUFQLEdBQWlCLENBQWpCIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwidmFyIGUgPSBmdW5jdGlvbigpIHtcclxuICAgIGZ1bmN0aW9uIHIoZSwgciwgbikge1xyXG4gICAgICAgIHJldHVybiByIHx8IG4gPyBTdHJpbmcuZnJvbUNoYXJDb2RlKHIgfHwgbikgOiB1W2VdIHx8IGVcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIG4oZSkge1xyXG4gICAgICAgIHJldHVybiBwW2VdXHJcbiAgICB9XHJcbiAgICB2YXIgdCA9IC8mcXVvdDt8Jmx0O3wmZ3Q7fCZhbXA7fCZuYnNwO3wmYXBvczt8JiMoXFxkKyk7fCYjKFxcZCspL2dcclxuICAgICAgLCBvID0gL1snPD4gXCImXS9nXHJcbiAgICAgICwgdSA9IHtcclxuICAgICAgICBcIiZxdW90O1wiOiAnXCInLFxyXG4gICAgICAgIFwiJmx0O1wiOiBcIjxcIixcclxuICAgICAgICBcIiZndDtcIjogXCI+XCIsXHJcbiAgICAgICAgXCImYW1wO1wiOiBcIiZcIixcclxuICAgICAgICBcIiZuYnNwO1wiOiBcIiBcIlxyXG4gICAgfVxyXG4gICAgICAsIGMgPSAvXFx1MDBhMC9nXHJcbiAgICAgICwgYSA9IC88YnJcXHMqXFwvPz4vZ2lcclxuICAgICAgLCBpID0gL1xccj9cXG4vZ1xyXG4gICAgICAsIGYgPSAvXFxzL2dcclxuICAgICAgLCBwID0ge307XHJcbiAgICBmb3IgKHZhciBzIGluIHUpXHJcbiAgICAgICAgcFt1W3NdXSA9IHM7XHJcbiAgICByZXR1cm4gdVtcIiZhcG9zO1wiXSA9IFwiJ1wiLFxyXG4gICAgcFtcIidcIl0gPSBcIiYjMzk7XCIsXHJcbiAgICB7XHJcbiAgICAgICAgZW5jb2RlOiBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlID8gKFwiXCIgKyBlKS5yZXBsYWNlKG8sIG4pLnJlcGxhY2UoaSwgXCI8YnIvPlwiKS5yZXBsYWNlKGYsIFwiJm5ic3A7XCIpIDogXCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGVjb2RlOiBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlID8gKFwiXCIgKyBlKS5yZXBsYWNlKGEsIFwiXFxuXCIpLnJlcGxhY2UodCwgcikucmVwbGFjZShjLCBcIiBcIikgOiBcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbmNvZGVCYXNlMTY6IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgaWYgKCFlKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGU7XHJcbiAgICAgICAgICAgIGUgKz0gXCJcIjtcclxuICAgICAgICAgICAgZm9yICh2YXIgciA9IFtdLCBuID0gMCwgdCA9IGUubGVuZ3RoOyB0ID4gbjsgbisrKVxyXG4gICAgICAgICAgICAgICAgci5wdXNoKGUuY2hhckNvZGVBdChuKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKSk7XHJcbiAgICAgICAgICAgIHJldHVybiByLmpvaW4oXCJcIilcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVuY29kZUJhc2UxNmZvckpTT046IGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgaWYgKCFlKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGU7XHJcbiAgICAgICAgICAgIGUgPSBlLnJlcGxhY2UoL1tcXHU0RTAwLVxcdTlGQkZdL2dpLCBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXNjYXBlKGUpLnJlcGxhY2UoXCIldVwiLCBcIlxcXFx1XCIpXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBmb3IgKHZhciByID0gW10sIG4gPSAwLCB0ID0gZS5sZW5ndGg7IHQgPiBuOyBuKyspXHJcbiAgICAgICAgICAgICAgICByLnB1c2goZS5jaGFyQ29kZUF0KG4pLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpKTtcclxuICAgICAgICAgICAgcmV0dXJuIHIuam9pbihcIlwiKVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGVjb2RlQmFzZTE2OiBmdW5jdGlvbihlKSB7XHJcbiAgICAgICAgICAgIGlmICghZSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBlO1xyXG4gICAgICAgICAgICBlICs9IFwiXCI7XHJcbiAgICAgICAgICAgIGZvciAodmFyIHIgPSBbXSwgbiA9IDAsIHQgPSBlLmxlbmd0aDsgdCA+IG47IG4gKz0gMilcclxuICAgICAgICAgICAgICAgIHIucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKFwiMHhcIiArIGUuc2xpY2UobiwgbiArIDIpKSk7XHJcbiAgICAgICAgICAgIHJldHVybiByLmpvaW4oXCJcIilcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVuY29kZU9iamVjdDogZnVuY3Rpb24ocikge1xyXG4gICAgICAgICAgICBpZiAociBpbnN0YW5jZW9mIEFycmF5KVxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgbiA9IDAsIHQgPSByLmxlbmd0aDsgdCA+IG47IG4rKylcclxuICAgICAgICAgICAgICAgICAgICByW25dID0gZS5lbmNvZGVPYmplY3QocltuXSk7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKFwib2JqZWN0XCIgPT0gdHlwZW9mIHIpXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBvIGluIHIpXHJcbiAgICAgICAgICAgICAgICAgICAgcltvXSA9IGUuZW5jb2RlT2JqZWN0KHJbb10pO1xyXG4gICAgICAgICAgICBlbHNlIGlmIChcInN0cmluZ1wiID09IHR5cGVvZiByKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGUuZW5jb2RlKHIpO1xyXG4gICAgICAgICAgICByZXR1cm4gclxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbG9hZFNjcmlwdDogZnVuY3Rpb24ocGF0aCkge1xyXG4gICAgICAgICAgICB2YXIgJHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpXHJcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF0uYXBwZW5kQ2hpbGQoJHNjcmlwdClcclxuICAgICAgICAgICAgJHNjcmlwdC5zZXRBdHRyaWJ1dGUoJ3NyYycsIHBhdGgpXHJcbiAgICAgICAgfSxcclxuICAgICAgICBhZGRMb2FkRXZlbnQ6IGZ1bmN0aW9uKGZ1bmMpe1xyXG4gICAgICAgICAgICB2YXIgb2xkb25sb2FkID0gd2luZG93Lm9ubG9hZDtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cub25sb2FkIT1cImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5vbmxvYWQgPSBmdW5jO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgd2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9sZG9ubG9hZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmMoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSgpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBlIl19
